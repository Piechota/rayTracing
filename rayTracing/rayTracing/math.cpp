#include <stdlib.h>    
#include "math.h"

#define BLUE_NOISE_NUM 256
const Vec2 BlueNoise[BLUE_NOISE_NUM] =
{
	Vec2( 0.5488135219f, 0.5928446054f ),
	Vec2( 0.0580291636f, 0.0564183332f ),
	Vec2( 0.5438059568f, 0.0922601670f ),
	Vec2( 0.0299503207f, 0.5615772605f ),
	Vec2( 0.2763371468f, 0.8023557663f ),
	Vec2( 0.2848855257f, 0.3088191152f ),
	Vec2( 0.7780388594f, 0.3299728930f ),
	Vec2( 0.7840586305f, 0.8526093364f ),
	Vec2( 0.0192320608f, 0.3109259903f ),
	Vec2( 0.3007269204f, 0.0428844839f ),
	Vec2( 0.0380182303f, 0.7944310904f ),
	Vec2( 0.3045715392f, 0.5593917370f ),
	Vec2( 0.5158542991f, 0.8433858752f ),
	Vec2( 0.8298353553f, 0.1004359946f ),
	Vec2( 0.7979031205f, 0.5814197063f ),
	Vec2( 0.5170233846f, 0.2883328199f ),
	Vec2( 0.6575832367f, 0.9615893960f ),
	Vec2( 0.9107665420f, 0.4419809282f ),
	Vec2( 0.1709926426f, 0.4465832710f ),
	Vec2( 0.6337319613f, 0.4416718781f ),
	Vec2( 0.6855370402f, 0.1902202070f ),
	Vec2( 0.4088680446f, 0.4235664308f ),
	Vec2( 0.4180097282f, 0.6999418736f ),
	Vec2( 0.6644993424f, 0.7240473628f ),
	Vec2( 0.1723115295f, 0.6784754395f ),
	Vec2( 0.3923070729f, 0.1751031578f ),
	Vec2( 0.9187033176f, 0.9590815902f ),
	Vec2( 0.8853642344f, 0.7200661302f ),
	Vec2( 0.1484785974f, 0.1863165051f ),
	Vec2( 0.9834955335f, 0.1696485579f ),
	Vec2( 0.1758581102f, 0.9790949821f ),
	Vec2( 0.4696625173f, 0.9796094298f ),
	Vec2( 0.8613083959f, 0.2226913273f ),
	Vec2( 0.0556877702f, 0.9208139181f ),
	Vec2( 0.3870145679f, 0.8650096655f ),
	Vec2( 0.6542403102f, 0.3169043660f ),
	Vec2( 0.4295180440f, 0.5608411431f ),
	Vec2( 0.1632850319f, 0.3029700518f ),
	Vec2( 0.2859004140f, 0.4346036017f ),
	Vec2( 0.9175899625f, 0.6020887494f ),
	Vec2( 0.0397706367f, 0.6752249599f ),
	Vec2( 0.1618911773f, 0.8617770672f ),
	Vec2( 0.0419627801f, 0.4351181090f ),
	Vec2( 0.6800467372f, 0.5858942866f ),
	Vec2( 0.7888401747f, 0.4573394060f ),
	Vec2( 0.9128546715f, 0.8369288445f ),
	Vec2( 0.5500180721f, 0.7167283297f ),
	Vec2( 0.6602063775f, 0.0768320486f ),
	Vec2( 0.2639494538f, 0.9085325599f ),
	Vec2( 0.2629213035f, 0.1878822893f ),
	Vec2( 0.7944805026f, 0.9703088999f ),
	Vec2( 0.2866776586f, 0.6832864285f ),
	Vec2( 0.5117866993f, 0.4750332832f ),
	Vec2( 0.6393817067f, 0.8327692151f ),
	Vec2( 0.8967110515f, 0.3245705068f ),
	Vec2( 0.7789641619f, 0.7293096185f ),
	Vec2( 0.4043717086f, 0.2997961044f ),
	Vec2( 0.1437108368f, 0.5621722937f ),
	Vec2( 0.2064683884f, 0.0832298249f ),
	Vec2( 0.5835984945f, 0.2002405375f ),
	Vec2( 0.9546824694f, 0.0669173151f ),
	Vec2( 0.7115505934f, 0.4998132885f ),
	Vec2( 0.3636402190f, 0.9633588195f ),
	Vec2( 0.5565224290f, 0.9242115021f ),
	Vec2( 0.3975585699f, 0.0577345267f ),
	Vec2( 0.1282074153f, 0.7624667883f ),
	Vec2( 0.0894180760f, 0.2490156740f ),
	Vec2( 0.5521485806f, 0.3846307397f ),
	Vec2( 0.4830111265f, 0.1805809885f ),
	Vec2( 0.9430901408f, 0.2513623834f ),
	Vec2( 0.7755057812f, 0.2420807183f ),
	Vec2( 0.5866536498f, 0.0159986876f ),
	Vec2( 0.9554213285f, 0.5161771178f ),
	Vec2( 0.2247063816f, 0.5150323510f ),
	Vec2( 0.0717646256f, 0.1573397219f ),
	Vec2( 0.7423145175f, 0.0749722049f ),
	Vec2( 0.7162066698f, 0.3948416412f ),
	Vec2( 0.3428463936f, 0.3696538806f ),
	Vec2( 0.6113227606f, 0.5301463008f ),
	Vec2( 0.7474030256f, 0.6507517695f ),
	Vec2( 0.3580306768f, 0.7753791213f ),
	Vec2( 0.8480298519f, 0.9084684253f ),
	Vec2( 0.9686611891f, 0.7363130450f ),
	Vec2( 0.2159311026f, 0.3782351613f ),
	Vec2( 0.9714180231f, 0.3813101053f ),
	Vec2( 0.2340105027f, 0.6144050956f ),
	Vec2( 0.0940895081f, 0.3614926040f ),
	Vec2( 0.9040894508f, 0.1401837468f ),
	Vec2( 0.9791814089f, 0.8924186826f ),
	Vec2( 0.6212453842f, 0.6485295296f ),
	Vec2( 0.9995623827f, 0.9797526598f ),
	Vec2( 0.7185788155f, 0.7937735319f ),
	Vec2( 0.8692822456f, 0.5248438120f ),
	Vec2( 0.7713801861f, 0.1533322185f ),
	Vec2( 0.4448270202f, 0.7936658263f ),
	Vec2( 0.8423613310f, 0.3988033235f ),
	Vec2( 0.4523781538f, 0.1096563861f ),
	Vec2( 0.3385476172f, 0.2434559762f ),
	Vec2( 0.4861261249f, 0.6549649239f ),
	Vec2( 0.2279964834f, 0.7344579101f ),
	Vec2( 0.4690043032f, 0.3651793897f ),
	Vec2( 0.3516822159f, 0.6241102815f ),
	Vec2( 0.7044442892f, 0.8824880123f ),
	Vec2( 0.3230171502f, 0.1246225759f ),
	Vec2( 0.8648973107f, 0.0223562121f ),
	Vec2( 0.3536432385f, 0.4919413924f ),
	Vec2( 0.0824871138f, 0.6154196858f ),
	Vec2( 0.8389641643f, 0.6475829482f ),
	Vec2( 0.2056616098f, 0.8040792346f ),
	Vec2( 0.1313308179f, 0.0634422973f ),
	Vec2( 0.0983511508f, 0.4817947447f ),
	Vec2( 0.5512029529f, 0.7829246521f ),
	Vec2( 0.4532579184f, 0.8776954412f ),
	Vec2( 0.0144470027f, 0.1098056957f ),
	Vec2( 0.9355558753f, 0.6679705977f ),
	Vec2( 0.6307241321f, 0.2538967431f ),
	Vec2( 0.0193513893f, 0.2316942513f ),
	Vec2( 0.2228717357f, 0.2558839023f ),
	Vec2( 0.8567171097f, 0.7881450057f ),
	Vec2( 0.1066377088f, 0.9989901185f ),
	Vec2( 0.1291754246f, 0.9222865701f ),
	Vec2( 0.0882982761f, 0.8574043512f ),
	Vec2( 0.2486839741f, 0.9825840592f ),
	Vec2( 0.6216938496f, 0.1349431276f ),
	Vec2( 0.4293192327f, 0.2383313477f ),
	Vec2( 0.7247031927f, 0.9660135508f ),
	Vec2( 0.1734534055f, 0.6168383956f ),
	Vec2( 0.4381732941f, 0.4896948934f ),
	Vec2( 0.4935221970f, 0.5404808521f ),
	Vec2( 0.3671148419f, 0.5540172458f ),
	Vec2( 0.5828897357f, 0.3127189577f ),
	Vec2( 0.7002881169f, 0.2630298436f ),
	Vec2( 0.0616695657f, 0.7304423451f ),
	Vec2( 0.8476122618f, 0.2853181660f ),
	Vec2( 0.4806827009f, 0.7366043329f ),
	Vec2( 0.6202059984f, 0.3780960739f ),
	Vec2( 0.9739176631f, 0.4461170435f ),
	Vec2( 0.5075975657f, 0.0380639769f ),
	Vec2( 0.7059237957f, 0.1214201227f ),
	Vec2( 0.9739625454f, 0.8081074953f ),
	Vec2( 0.9822207093f, 0.6233941317f ),
	Vec2( 0.7862195969f, 0.7896724939f ),
	Vec2( 0.3249951899f, 0.8859133720f ),
	Vec2( 0.1531351209f, 0.1219450235f ),
	Vec2( 0.6296586990f, 0.8993276954f ),
	Vec2( 0.6126230955f, 0.7612042427f ),
	Vec2( 0.1066805348f, 0.6742972732f ),
	Vec2( 0.4230405092f, 0.9308856726f ),
	Vec2( 0.7810223103f, 0.0319798961f ),
	Vec2( 0.2179973871f, 0.1438544989f ),
	Vec2( 0.4145192504f, 0.6246610880f ),
	Vec2( 0.7131227851f, 0.3195981085f ),
	Vec2( 0.5782749057f, 0.8533146977f ),
	Vec2( 0.7617699504f, 0.5335637331f ),
	Vec2( 0.0171467047f, 0.5019222498f ),
	Vec2( 0.2414158285f, 0.8531301022f ),
	Vec2( 0.2640208602f, 0.1017977744f ),
	Vec2( 0.4804430902f, 0.4242362082f ),
	Vec2( 0.3487513959f, 0.7110109925f ),
	Vec2( 0.4044963717f, 0.3601662815f ),
	Vec2( 0.6795738935f, 0.6489184499f ),
	Vec2( 0.9241007566f, 0.1953141093f ),
	Vec2( 0.2860531509f, 0.5000686646f ),
	Vec2( 0.8469752073f, 0.1589742601f ),
	Vec2( 0.1136501506f, 0.4201649427f ),
	Vec2( 0.7790575027f, 0.3934071362f ),
	Vec2( 0.5373960733f, 0.1566326767f ),
	Vec2( 0.6557361484f, 0.0203641932f ),
	Vec2( 0.2014716864f, 0.1981725097f ),
	Vec2( 0.3864394426f, 0.1181320623f ),
	Vec2( 0.5289682150f, 0.9823713899f ),
	Vec2( 0.7633656263f, 0.9140211940f ),
	Vec2( 0.8446742296f, 0.4620747864f ),
	Vec2( 0.9093944430f, 0.8954947591f ),
	Vec2( 0.9576621056f, 0.3162726760f ),
	Vec2( 0.8425903320f, 0.8537179232f ),
	Vec2( 0.1917449087f, 0.9094030857f ),
	Vec2( 0.5721676946f, 0.4476667941f ),
	Vec2( 0.5508384109f, 0.5278219581f ),
	Vec2( 0.9198141098f, 0.7736132145f ),
	Vec2( 0.6026137471f, 0.0781143680f ),
	Vec2( 0.0336382426f, 0.3697068393f ),
	Vec2( 0.8841344118f, 0.0835459232f ),
	Vec2( 0.9232870340f, 0.0161701404f ),
	Vec2( 0.2795690894f, 0.2447152585f ),
	Vec2( 0.9002332091f, 0.3829245865f ),
	Vec2( 0.5637363791f, 0.2563983202f ),
	Vec2( 0.1536917090f, 0.5043926835f ),
	Vec2( 0.2254093587f, 0.3207403719f ),
	Vec2( 0.0763839558f, 0.3022462130f ),
	Vec2( 0.5523558855f, 0.6596547961f ),
	Vec2( 0.7384891510f, 0.5947069526f ),
	Vec2( 0.6895393729f, 0.4423975050f ),
	Vec2( 0.2776252031f, 0.3757548034f ),
	Vec2( 0.2306833118f, 0.4460553229f ),
	Vec2( 0.3069282174f, 0.9765173793f ),
	Vec2( 0.0267051533f, 0.8468238711f ),
	Vec2( 0.2918832004f, 0.6226034760f ),
	Vec2( 0.4986889362f, 0.2418627888f ),
	Vec2( 0.3434145749f, 0.3126802742f ),
	Vec2( 0.4675852954f, 0.6046543717f ),
	Vec2( 0.1641042531f, 0.3628539145f ),
	Vec2( 0.3419303596f, 0.8299989104f ),
	Vec2( 0.8568897843f, 0.5929581523f ),
	Vec2( 0.6125395298f, 0.7075890899f ),
	Vec2( 0.4916680157f, 0.9198803902f ),
	Vec2( 0.0874013901f, 0.1034890041f ),
	Vec2( 0.8597651720f, 0.9641980529f ),
	Vec2( 0.4974820614f, 0.7905195951f ),
	Vec2( 0.1741206497f, 0.7341389060f ),
	Vec2( 0.2830304801f, 0.7484536171f ),
	Vec2( 0.0553416647f, 0.9763767123f ),
	Vec2( 0.8319286108f, 0.7000622749f ),
	Vec2( 0.0829749629f, 0.5442187190f ),
	Vec2( 0.7164919972f, 0.0253732316f ),
	Vec2( 0.6263247132f, 0.5865042210f ),
	Vec2( 0.4550502598f, 0.0427727550f ),
	Vec2( 0.7190949321f, 0.7282270193f ),
	Vec2( 0.4657742083f, 0.3110654056f ),
	Vec2( 0.3589872122f, 0.4391818941f ),
	Vec2( 0.2436951250f, 0.0337494798f ),
	Vec2( 0.2527895570f, 0.5671029091f ),
	Vec2( 0.4145333767f, 0.9916203618f ),
	Vec2( 0.8347666264f, 0.3390942216f ),
	Vec2( 0.3535821140f, 0.0854343101f ),
	Vec2( 0.6630083919f, 0.5259648561f ),
	Vec2( 0.9893512726f, 0.6891654134f ),
	Vec2( 0.2314360589f, 0.6814799309f ),
	Vec2( 0.3593108356f, 0.0197278261f ),
	Vec2( 0.4069694579f, 0.7576887012f ),
	Vec2( 0.9619620442f, 0.5681327581f ),
	Vec2( 0.6615638733f, 0.7813719511f ),
	Vec2( 0.1618122756f, 0.2317564338f ),
	Vec2( 0.0891817361f, 0.8051459193f ),
	Vec2( 0.6891118288f, 0.8319786787f ),
	Vec2( 0.7933315635f, 0.6346432567f ),
	Vec2( 0.3234562278f, 0.1875326633f ),
	Vec2( 0.5204575062f, 0.3418112695f ),
	Vec2( 0.0533065498f, 0.2004871368f ),
	Vec2( 0.9526835680f, 0.1187639013f ),
	Vec2( 0.0077016694f, 0.0335630141f ),
	Vec2( 0.8159610033f, 0.5155269504f ),
	Vec2( 0.7383568883f, 0.1997481585f ),
	Vec2( 0.2013370395f, 0.5619663596f ),
	Vec2( 0.4987535477f, 0.1204046533f ),
	Vec2( 0.1833469719f, 0.0377601273f ),
	Vec2( 0.5981609225f, 0.9525853395f ),
	Vec2( 0.6935729384f, 0.9258685112f ),
	Vec2( 0.1436928213f, 0.8110988140f ),
	Vec2( 0.9882630706f, 0.2726239264f ),
	Vec2( 0.8902491331f, 0.2689718902f ),
	Vec2( 0.8076329231f, 0.1922020763f ),
	Vec2( 0.5722146034f, 0.1270806789f ),
	Vec2( 0.8381175399f, 0.7452417612f ),
	Vec2( 0.8826380372f, 0.6703190804f ),
	Vec2( 0.8237152100f, 0.0523958765f )
};

CRandomNumber::CRandomNumber()
	: m_engine( m_device() )
	, m_ditribution( 0., 1. )
{}

float CRandomNumber::Random()
{
	return float( m_ditribution( m_engine ) );
}

CRandomNumber GRandomNumber;

int Math::WangHash(int index)
{
	index = (index ^ 61) ^ (index >> 16);
	index *= 9;
	index = index ^ (index >> 4);
	index *= 0x27d4eb2d;
	index = index ^ (index >> 15);
	return index;
}

Vec2 Math::BlueNoise2D(int const index)
{
	return BlueNoise[index % BLUE_NOISE_NUM];
}

Vec3 Math::RandomInUnitSphere()
{
	Vec3 p;

	do
	{
		p.x = GRandomNumber.Random() * 2.f - 1.f;
		p.y = GRandomNumber.Random() * 2.f - 1.f;
		p.z = GRandomNumber.Random() * 2.f - 1.f;
	} while ( 1.f <= p.MagnitudeSq() );

	return p;
}

Vec3 Math::RandomInUnitDisk()
{
	Vec3 p;
	p.z = 0.f;
	do
	{
		p.x = GRandomNumber.Random() * 2.f - 1.f;
		p.y = GRandomNumber.Random() * 2.f - 1.f;
	} while ( 1.f <= p.MagnitudeSq() );

	return p;
}

Vec3 Math::Reflect( Vec3 const v, Vec3 const n )
{
	return v - n * 2.f * Vec3::Dot( v, n );
}

bool Math::Refract( Vec3 const v, Vec3 const n, float niOverNt, Vec3& outRefracted )
{
	Vec3 const uv = v.GetNormalized();
	float const dt = Vec3::Dot( uv, n );
	float const discriminant = 1.f - niOverNt * niOverNt * ( 1.f - dt * dt );
	if ( 0.f < discriminant )
	{
		outRefracted = ( uv - n *dt ) * niOverNt - n * sqrtf( discriminant );
		return true;
	}

	return false;
}

float Math::Schlick( float const cosine, float const refIdx )
{
	float r0 = ( 1.f - refIdx ) / ( 1.f + refIdx );
	r0 = r0 * r0;
	return r0 + ( 1.f - r0 ) * powf( 1.f - cosine, 5.f );
}

float Math::Rand()
{
	return GRandomNumber.Random();
}

Vec2 Math::GetSphereUV( Vec3 const p )
{

	float const phi = atan2f( p.y, p.x );
	float const theta = asinf( p.z );

	return Vec2( 1.f - ( phi + MathConsts::PI ) / ( 2.f * MathConsts::PI ), ( theta + MathConsts::PI * 0.5f ) / MathConsts::PI );
}
